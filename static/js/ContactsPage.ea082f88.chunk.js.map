{"version":3,"file":"static/js/ContactsPage.ea082f88.chunk.js","mappings":"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","sources":["../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/contacts-selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Notification/Notification.module.css?a91f","components/Notification/Notification.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.loading;\n\nexport const getVisibleContacts = createSelector([getContacts, getFilter], (items, filter) => {\n  const updItems = items.filter(item => item.name.toLowerCase().includes(filter.toLowerCase()));\n  return updItems;\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\",\"title\":\"Section_title__SLHvV\"};","import PropTypes from 'prop-types';\nimport styles from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <section className={styles.section}>\n      <h2 className={styles.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"btnAddContact\":\"ContactForm_btnAddContact__AepU1\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { getContacts, getLoading } from 'redux/contacts/contacts-selectors';\nimport styles from './ContactForm.module.css';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getLoading);\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        throw new Error('Error');\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const checkContact = contacts.find(elem => elem.name.toLowerCase() === name.toLowerCase());\n    if (!checkContact) {\n      dispatch(addContact({ name, number }));\n      resetForm();\n    } else {\n      alert(`${name} is already in contacts`);\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          className={styles.input}\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label>\n        Number\n        <input\n          className={styles.input}\n          value={number}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button className={styles.btnAddContact} type=\"submit\" disabled={isLoading}>\n        {!isLoading ? 'Add contact' : 'Adding...'}\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"contact\":\"ContactList_contact__0STHS\",\"item\":\"ContactList_item__EZYHO\",\"btnDeleteContact\":\"ContactList_btnDeleteContact__yYG3c\"};","import { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n// import ContactListItem from './ContactListItem';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport { getVisibleContacts } from 'redux/contacts/contacts-selectors';\nimport styles from './ContactList.module.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={styles.list}>\n      {contacts.map(({ id, name, number }) => (\n        // <ContactListItem\n        //   key={id}\n        //   name={name}\n        //   number={number}\n        //   onDeleteContact={() => onDeleteContact(id)}\n        // />\n        <li className={styles.item} key={id}>\n          <p className={styles.contact}>\n            {name}&emsp;\n            {number}\n          </p>\n          <button\n            className={styles.btnDeleteContact}\n            type=\"submit\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//     })\n//   ),\n// };\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"lable\":\"Filter_lable__OmyBy\",\"input\":\"Filter_input__N7T3z\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/contacts-slice';\nimport { getFilter } from 'redux/contacts/contacts-selectors';\nimport styles from './Filter.module.css';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={styles.lable}>\n      Find a contact by name\n      <input\n        className={styles.input}\n        type=\"text\"\n        value={value}\n        onChange={evt => dispatch(changeFilter(evt.target.value))}\n      ></input>\n    </label>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"notify\":\"Notification_notify__nw+qK\"};","import PropTypes from 'prop-types';\nimport styles from './Notification.module.css';\n\nconst Notification = ({ message }) => {\n  return <p className={styles.notify}>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ContactsPage_description__d-Zaf\"};","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contacts-selectors';\nimport { getExistContacts } from 'redux/contacts/contacts-operations';\nimport Section from '../../components/Section';\nimport ContactForm from '../../components/ContactForm';\nimport ContactList from '../../components/ContactList';\nimport Filter from '../../components/Filter';\nimport Notification from '../../components/Notification';\nimport styles from './ContactsPage.module.css';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getExistContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Section title=\"Add contact\">\n        <ContactForm />\n      </Section>\n\n      <Section title=\"Contacts list\">\n        {contacts.length > 0 ? (\n          <>\n            <div className={styles.description}>All contacts: {contacts.length}</div>\n            <Filter />\n            <ContactList />\n          </>\n        ) : (\n          <Notification message=\"There are no contacts yet. Let's create a new one!\" />\n        )}\n      </Section>\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getContacts","state","contacts","items","getFilter","filter","getLoading","loading","getVisibleContacts","item","toLowerCase","includes","title","children","className","styles","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","isLoading","handleChange","evt","target","resetForm","onSubmit","preventDefault","elem","alert","addContact","onChange","type","pattern","required","disabled","id","onClick","deleteContact","changeFilter","message","useEffect","getExistContacts"],"sourceRoot":""}